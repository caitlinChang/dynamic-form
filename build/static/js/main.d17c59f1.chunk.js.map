{"version":3,"sources":["components/ConditionCompose/constant.ts","pages/formily/schema/index.ts","pages/formily/schema/answerSchema.ts","pages/formily/schema/actionSchema.ts","pages/formily/schema/buttonSettingsSchema.ts","pages/formily/schema/buttonListSchema.ts","components/ConditionCompose/store.ts","components/ConditionCompose/index.less","components/ConditionCompose/ConditionSubItem.tsx","components/ConditionCompose/ConditionItem.tsx","components/ConditionCompose/index.tsx","pages/formily/components/ArrayCard/index.tsx","pages/formily/components/AuthorityTitle/index.tsx","pages/formily/components.tsx","pages/formily/index.tsx","utils/constant.ts","pages/reactJsonSchemaForm/index.tsx","utils/index.ts","pages/x-render/schema/index.ts","pages/x-render/index.tsx","App.js","reportWebVitals.js","index.js"],"names":["LinkType","formSchema","answerTitle","type","children","level","answer","style","marginBottom","borderBottom","title","items","properties","conditions","background","default","select","linked","padding","margin","label","buttonStyle","optionType","size","enum","value","actionTitle","action","type1Status","name","disabled","visible","type1","options","dependencies","fulfill","state","type2","additionalProperties","buttonSetting","button_setting","float","target","button_list","button_style","button_text","button_function","button_URL","schemaTree","Schema","userType","tabs","schema","edit","tab","key","View","form","SelfIncreasingStore","props","templateParams","this","update","makeAutoObservable","index","splice","params","console","log","push","store","observer","onChange","initialValue","useEffect","map","item","Group","Button","display","className","flex","onClick","add","delete","block","TabPane","Tabs","initialPanes","closable","link","AND","useState","activeKey","panes","pane","field","useField","useFieldSchema","status","useForm","getValuesIn","remove","marginRight","setValuesIn","color","icon","FormOutlined","EyeOutlined","components","Select","ArrayCards","Input","Form","FormItem","Radio","Switch","ConditionCompose","FormTab","Typography","ArrayTabs","AuthorityTitle","ArrayCard","FormilyComponent","createForm","SchemaField","createSchemaField","labelAlign","labelCol","wrapperCol","marginTop","values","ReactJsonSchemaForm","buttonStyleOptions","setButtonStyleOptions","Promise","resolve","reject","setTimeout","then","data","choose","buttonText","allowClear","defaultValue","buttonFunction","buttonUrl","uiSchema","onSubmit","FormRenderComponent","onFinish","formData","errors","submit","App","to","path","border","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d17c59f1.chunk.js","sourcesContent":["export enum LinkType {\n  AND = \"and\",\n  OR = \"or\",\n}\n\nexport type ConditionSubItemType = {\n  value: string | number;\n  link?: LinkType;\n};\n\nexport type ConditionItemType = {\n  value: ConditionSubItemType[];\n  link?: LinkType;\n};\n","import { buttonSettingSchema } from \"./buttonSettingsSchema\";\nimport { buttonListSchema } from \"./buttonListSchema\";\nimport { Schema } from \"@formily/react\";\nimport { answerTabSchema } from \"./answerSchema\";\nimport { actionSchema } from \"./actionSchema\";\n\nconst formSchema = {\n  answerTitle: {\n    type: \"void\",\n    \"x-component\": \"Typography.Title\",\n    \"x-component-props\": {\n      children: \"Answer\",\n      level: 5,\n    },\n  },\n  answer: answerTabSchema,\n  actionTitle: {\n    type: \"void\",\n    \"x-component\": \"Typography.Title\",\n    \"x-component-props\": {\n      children: \"Action\",\n      level: 5,\n    },\n  },\n  action: actionSchema,\n  buttonSetting: buttonSettingSchema,\n  button_list: buttonListSchema,\n};\n\nexport const schemaTree = new Schema({\n  type: \"object\",\n  properties: {\n    // 用户权限控制字段\n    userType: {\n      type: \"string\",\n      title: \"User Type\",\n      \"x-component\": \"Select\",\n      \"x-decorator\": \"FormItem\",\n      default: \"admin\",\n      enum: [\n        {\n          label: \"Admin\",\n          value: \"admin\",\n        },\n        {\n          label: \"normal user\",\n          value: \"normal\",\n        },\n      ],\n    },\n    tabs: {\n      // 前端控制字段\n      type: \"string\",\n      default: \"edit\",\n      \"x-component\": \"FormTab\",\n      \"x-reactions\": {\n        target: \"form\",\n        fulfill: {\n          schema: {\n            \"x-read-pretty\": \"{{$self.value === 'view'}}\",\n          },\n        },\n      },\n      properties: {\n        edit: {\n          type: \"void\",\n          \"x-component\": \"FormTab.TabPane\",\n          \"x-component-props\": {\n            tab: \"Edit\",\n            key: \"edit\",\n          },\n        },\n        View: {\n          type: \"void\",\n          \"x-component\": \"FormTab.TabPane\",\n          \"x-component-props\": {\n            tab: \"View\",\n            key: \"view\",\n          },\n        },\n      },\n    },\n    form: {\n      // 真正的表单字段\n      type: \"object\",\n      \"x-read-pretty\": true,\n      // @ts-ignore\n      properties: {\n        ...formSchema,\n      },\n    },\n  },\n});\n","export const answerTabSchema = {\n  type: \"array\",\n  \"x-component\": \"ArrayTabs\",\n  \"x-component-props\": {\n    style: {\n      marginBottom: \"20px\",\n      borderBottom: \"1px solid #f0f0f0\",\n    },\n  },\n  title: \"Case\", // TODO: Tab 名称的配置\n  items: {\n    type: \"object\",\n    properties: {\n      conditions: {\n        type: \"array\",\n        \"x-component\": \"ArrayCard\",\n        \"x-component-props\": {\n          style: {\n            background: \"#f0f0f0\",\n          },\n        },\n        default: [\n          {\n            select: \"1\",\n            linked: \"and\",\n          },\n        ],\n        items: {\n          type: \"object\",\n          \"x-decorator\": \"div\",\n          \"x-decorator-props\": {\n            style: {\n              background: \"#fafafa\",\n              padding: \"10px\",\n              margin: \"0  0 10px\",\n            },\n            label: \"\",\n          },\n          properties: {\n            title: {\n              type: \"void\",\n              title: \"Condition\",\n              \"x-component\": \"Typography.Text\",\n              \"x-component-props\": {\n                children: \"Condition\",\n              },\n            },\n            select: {\n              type: \"string\",\n              // title: \"Condition\", // TODO： 对表达式的支持\n              \"x-component\": \"Select\",\n              \"x-decorator\": \"FormItem\",\n              \"x-decorator-props\": {\n                style: {\n                  margin: 0,\n                },\n                label: \"\",\n              },\n            },\n            linked: {\n              type: \"string\", // TODO: 格式问题，如果前端组件需要boolean数据，后端传参需要0和1，这种情况如何处理\n              \"x-component\": \"Radio.Group\",\n              \"x-component-props\": {\n                buttonStyle: \"solid\",\n                optionType: \"button\",\n                size: \"small\",\n              },\n              default: \"and\",\n              enum: [\n                {\n                  label: \"AND\",\n                  value: \"and\",\n                },\n                {\n                  label: \"OR\",\n                  value: \"or\",\n                },\n              ],\n              \"x-decorator\": \"FormItem\",\n              \"x-decorator-props\": {\n                style: {\n                  margin: 0,\n                },\n                label: \"\",\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n","export const actionSchema = {\n  type: \"object\",\n  properties: {\n    // TODO: 另设关联字段去实现显示和隐藏的控制\n    type1Status: {\n      type: \"object\",\n      \"x-component\": \"AuthorityTitle\",\n      \"x-component-props\": {\n        name: \"type 1\",\n      },\n      default: {\n        disabled: false,\n        visible: true,\n      },\n    },\n    type1: {\n      type: \"string\",\n      \"x-component\": \"Radio.Group\",\n      \"x-component-props\": {\n        options: [\n          {\n            label: \"Button Selection\",\n            value: 1,\n          },\n          {\n            label: \"Card Selection\",\n            value: 2,\n          },\n          {\n            label: \"Popup Selection\",\n            value: 3,\n          },\n        ],\n      },\n      default: 1,\n      \"x-reactions\": {\n        dependencies: [\"userType\"],\n        fulfill: {\n          state: {\n            visible:\n              \"{{$dependencies[0] === 'admin' || $form.getValuesIn(['form.action.type1Status']).visible}}\",\n            disabled:\n              \"{{$dependencies[0] === 'normal' && $form.getValuesIn(['form.action.type1Status']).disabled}}\",\n          },\n        },\n      },\n    },\n    type2: {\n      type: \"string\",\n      \"x-component\": \"Input\",\n      \"x-decorator\": \"AuthorityTitle\",\n      \"x-decorator-props\": {\n        name: \"Type 2\",\n      },\n      additionalProperties: {\n        disabled: {\n          type: \"boolean\",\n        },\n        visible: {\n          type: \"boolean\",\n        },\n      },\n    },\n  },\n};\n","export const buttonSettingSchema = {\n  type: \"void\",\n  \"x-component\": \"Typography.Title\",\n  \"x-component-props\": {\n    children: \"Button Setting\",\n    level: 5,\n  },\n  properties: {\n    button_setting: {\n      type: \"boolean\",\n      default: true,\n      \"x-component\": \"Switch\",\n      \"x-component-props\": {\n        style: {\n          float: \"right\",\n        },\n      },\n      // schema 联动 配置, 内置表达式\n      \"x-reactions\": {\n        target: \"form.button_list\",\n        fulfill: {\n          state: {\n            visible: \"{{$self.value === true }}\",\n          },\n        },\n      },\n    },\n  },\n};\n","export const itemSchema = {\n  type: \"object\",\n  properties: {\n    button_style: {\n      type: \"string\",\n      title: \"Button Style\",\n      name: \"button_style\",\n      \"x-component\": \"Select\",\n      \"x-component-props\": {},\n      \"x-decorator\": \"FormItem\",\n      \"x-decorator-props\": {\n        label: \"Button Style\",\n      },\n      default: \"normal\",\n    },\n    button_text: {\n      title: \"Button Text\",\n      type: \"string\",\n      \"x-component\": \"Input.TextArea\",\n      \"x-decorator\": \"FormItem\",\n      \"x-decorator-props\": {\n        label: \"Button Text\",\n      },\n      default: \"Yes Or No\",\n    },\n    button_function: {\n      title: \"Button Function\",\n      type: \"string\",\n      \"x-component\": \"Select\",\n      \"x-decorator\": \"FormItem\",\n      \"x-decorator-props\": {\n        label: \"Button Function\",\n      },\n      default: \"for use to change password\",\n    },\n    button_URL: {\n      title: \"URL\",\n      type: \"string\",\n      \"x-component\": \"Select\",\n      \"x-decorator\": \"FormItem\",\n      \"x-decorator-props\": {\n        label: \"URL\",\n      },\n      default: \"************\",\n    },\n  },\n};\n\nexport const buttonListSchema = {\n  type: \"array\",\n  title: \"Button Setting\",\n  \"x-component\": \"ArrayCard\",\n  \"x-hidden\": false,\n  default: [{}],\n  items: itemSchema,\n};\n","import { makeAutoObservable } from \"mobx\";\nimport React from \"react\";\n// 联动自增组件\nexport class SelfIncreasingStore<T> {\n  value: (T | undefined)[];\n  templateParams: T | undefined;\n  constructor(props?: { value?: T[]; templateParams?: T }) {\n    this.value = [];\n    this.templateParams = props?.templateParams;\n    this.update(props?.value || []);\n\n    makeAutoObservable(this);\n  }\n\n  delete(index: number) {\n    this.value.splice(index, 0);\n  }\n\n  add(params?: T) {\n    console.log(\"add trigger\");\n\n    this.value.push(params || this.templateParams);\n  }\n\n  update(value: T[]) {\n    this.value = value;\n  }\n}\n\nexport const SelfIncreasingContext =\n  // @ts-ignore\n  React.createContext<SelfIncreasingStore<any>>();\n","export default __webpack_public_path__ + \"static/media/index.604d7a72.less\";","import React, { useContext, useEffect, useState } from \"react\";\nimport { Select, Radio, Button } from \"antd\";\nimport { SelfIncreasingStore, SelfIncreasingContext } from \"./store\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { ConditionSubItemType } from \"./constant\";\n\nimport \"./index.less\";\n\ntype PropsType<T> = {\n  value?: T[];\n  initialValue?: T[];\n  onChange?: (value: T[]) => void;\n};\n\nconst options = [\n  {\n    label: \"Question 1\",\n    value: 1,\n  },\n  {\n    label: \"Question 2\",\n    value: 2,\n  },\n  {\n    label: \"Question 3\",\n    value: 3,\n  },\n];\n\nconst store = new SelfIncreasingStore();\n\nconst ConditionSubItem = function (props: PropsType<ConditionSubItemType>) {\n  const { value, onChange, initialValue } = props;\n  console.log(\"subItem store = \", store);\n  useEffect(() => {\n    // onChange?.(store.value);\n    store.update(initialValue || []);\n  }, [initialValue]);\n  return (\n    <div>\n      {store?.value?.map((item, index: number) => {\n        return (\n          <div>\n            {index > 0 && (\n              <Radio.Group buttonStyle=\"solid\">\n                <Radio.Button value=\"a\">And</Radio.Button>\n                <Radio.Button value=\"b\">Or</Radio.Button>\n              </Radio.Group>\n            )}\n            <div\n              style={{ display: \"flex\", margin: \"10px 0\" }}\n              className=\"condition_compose-select\"\n            >\n              <Select style={{ flex: 1 }} options={options} />\n              <Button style={{}} onClick={() => store.add()}>\n                {\" \"}\n                +{\" \"}\n              </Button>\n              <Button onClick={() => store.delete(index)}> - </Button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default observer(ConditionSubItem);\n","import React, { useEffect } from \"react\";\nimport { Button } from \"antd\";\nimport { SelfIncreasingStore } from \"./store\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { ConditionItemType } from \"./constant\";\n\nimport ConditionSubItem from \"./ConditionSubItem\";\n\nimport \"./index.less\";\n\ntype PropsType<T> = {\n  value?: T[];\n  initialValue?: T[];\n  onChange?: (value: T[]) => void;\n};\n\nconst store = new SelfIncreasingStore<ConditionItemType>({\n  templateParams: {\n    value: [\n      {\n        value: \"\",\n      },\n    ],\n  },\n});\n\nconst ConditionItem = function (\n  props: PropsType<ConditionItemType | undefined>\n) {\n  const { value, onChange, initialValue } = props;\n  useEffect(() => {\n    store.update(initialValue as any);\n  }, [initialValue]);\n\n  useEffect(() => {\n    if (store.value) onChange?.(store.value);\n  }, [store.value]);\n  return (\n    <div>\n      <h3>Condition {}</h3>\n      {store?.value?.map(\n        (item: ConditionItemType | undefined, index: number) => {\n          return (\n            <div>\n              <ConditionSubItem\n                value={item?.value}\n                initialValue={item?.value}\n              />\n            </div>\n          );\n        }\n      )}\n      <Button\n        style={{ margin: \"20px 0\" }}\n        type=\"dashed\"\n        block\n        onClick={() => store.add()}\n      >\n        + Condition Set\n      </Button>\n    </div>\n  );\n};\n\nexport default observer(ConditionItem);\n","import React, { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Tabs, TabsProps, TabPaneProps } from \"antd\";\nimport ConditionItem from \"./ConditionItem\";\n\nimport { ConditionItemType, LinkType } from \"./constant\";\n\ntype PropsType = {\n  onChange: (value: any) => void;\n  tabs: TabPaneProps[];\n  value: ConditionItemType[];\n};\n\n/**\n * 这是一个基于antd的业务组件，测试能否接入Formily 或其他动态表单，记录接入成本\n * @returns\n */\nconst { TabPane } = Tabs;\n\nconst initialPanes = [{ title: \"Default\", key: \"1\", closable: false }];\n\nconst initialValue = [\n  {\n    value: [\n      {\n        value: \"1\",\n        link: LinkType.AND,\n      },\n    ],\n    link: LinkType.AND,\n  },\n];\n\nconst ConditionCompose = function (props: PropsType) {\n  const [activeKey, setActiveKey] = useState(\"1\");\n  const [panes, setPanes] = useState(initialPanes);\n  const handleTabChange = function () {};\n\n  return (\n    <div>\n      <Tabs\n        type=\"editable-card\"\n        onChange={handleTabChange}\n        activeKey={activeKey}\n      >\n        {panes.map((pane) => (\n          <TabPane\n            tab={pane.title}\n            key={pane.key}\n            closable={pane.closable}\n          ></TabPane>\n        ))}\n      </Tabs>\n      <ConditionItem\n        value={props.value}\n        onChange={props.onChange}\n        initialValue={initialValue}\n      />\n    </div>\n  );\n};\n\nexport default observer(ConditionCompose);\n","import React, { ReactElement, createContext, useContext } from \"react\";\nimport { ArrayField, Field, Form } from \"@formily/core\";\nimport {\n  ISchema,\n  RecursionField,\n  useFieldSchema,\n  useField,\n  observer,\n  useForm,\n} from \"@formily/react\";\nimport { Button } from \"antd\";\n\ntype PropsType = Field & {\n  children: (index: number) => ReactElement;\n  title?: string;\n};\n// 用 JSON - Schema 实现自定义组件\nconst ArrayCard = (props: PropsType) => {\n  const field = useField<ArrayField>();\n  const schema = useFieldSchema();\n  const form = useForm();\n  const status = form.getValuesIn([\"tabs\"]);\n  console.log(\"status = \", status);\n\n  return (\n    <div>\n      <h3>{props.title}</h3>\n      {field.value?.map((item: any, index: number) => (\n        <div key={index}>\n          {status === \"edit\" && (\n            <Button\n              style={{ float: \"right\" }}\n              size=\"small\"\n              onClick={() => field.remove(index)}\n            >\n              Delete\n            </Button>\n          )}\n          <RecursionField name={index} schema={schema.items as any} />\n        </div>\n      ))}\n      {status === \"edit\" && (\n        <Button\n          type=\"dashed\"\n          block\n          onClick={() => {\n            field.push({});\n          }}\n        >\n          + Add\n        </Button>\n      )}\n    </div>\n  );\n};\nexport default observer(ArrayCard);\n","import React, {\n  ReactElement,\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n} from \"react\";\nimport { ArrayField, Field, Form } from \"@formily/core\";\nimport {\n  ISchema,\n  RecursionField,\n  useFieldSchema,\n  useField,\n  observer,\n  useForm,\n} from \"@formily/react\";\nimport { Button } from \"antd\";\n\nimport {\n  FormOutlined,\n  EyeInvisibleOutlined,\n  EyeOutlined,\n} from \"@ant-design/icons\";\n\ntype ValueType = {\n  visible?: boolean;\n  disabled?: boolean;\n};\n\ntype PropsType = {\n  children?: (index: number) => ReactElement;\n  name: string;\n  value?: ValueType;\n  onChange?: (v: ValueType) => void;\n};\n// 用 JSON - Schema 实现自定义组件\nconst ArrayCard = (props: PropsType) => {\n  const { disabled = false, visible = true } = props.value || {};\n  const schema = useFieldSchema();\n  const form = useForm();\n  const userType = form.getValuesIn([\"userType\"]);\n  const handleControlEdit = function () {\n    form.setValuesIn(\"form.action.type1Status\", {\n      disabled: !disabled,\n      visible,\n    });\n    props.onChange?.({\n      disabled: !disabled,\n      visible,\n    });\n  };\n  const handleControlVisible = function () {\n    form.setValuesIn(\"form.action.type1Status\", {\n      visible: !visible,\n      disabled,\n    });\n    console.log(\"value = \", form.getValuesIn([\"form.action.type1Status\"]));\n\n    props.onChange?.({\n      visible: !visible,\n      disabled,\n    });\n  };\n  return (\n    <div style={{ marginBottom: \"20px\" }}>\n      <div style={{ display: \"flex\", margin: \"10px 0\" }}>\n        <h3 style={{ marginRight: \"20px\" }}>{props.name}</h3>\n        {userType === \"admin\" && (\n          <>\n            <Button\n              onClick={handleControlEdit}\n              style={{ color: disabled ? \"#555\" : \"red\", marginRight: \"10px\" }}\n              icon={<FormOutlined />}\n            ></Button>\n            <Button\n              style={{ color: visible ? \"red\" : \"#555\" }}\n              onClick={handleControlVisible}\n              icon={<EyeOutlined />}\n            ></Button>\n          </>\n        )}\n      </div>\n\n      {props.children}\n    </div>\n  );\n};\nexport default observer(ArrayCard);\n","import {\n  Select,\n  Input,\n  Form,\n  FormItem,\n  Radio,\n  Switch,\n  FormTab,\n  ArrayCards,\n  ArrayTabs,\n} from \"@formily/antd\";\nimport ConditionCompose from \"../../components/ConditionCompose\";\nimport ArrayCard from \"./components/ArrayCard\";\nimport AuthorityTitle from \"./components/AuthorityTitle\";\n\nimport { Typography } from \"antd\";\nexport const components = {\n  Select,\n  ArrayCards,\n  Input,\n  Form,\n  FormItem,\n  Radio,\n  Switch,\n  ConditionCompose,\n  FormTab,\n  Typography,\n  ArrayTabs,\n  AuthorityTitle,\n  ArrayCard,\n};\n","import React from \"react\";\nimport { createForm, onFieldValueChange, FormPath } from \"@formily/core\";\nimport { FormProvider, Field, createSchemaField } from \"@formily/react\";\nimport { Form, FormButtonGroup } from \"@formily/antd\";\n\nimport { schemaTree } from \"./schema/index\";\nimport { components } from \"./components\";\n\nimport { Button } from \"antd\";\nimport ButtonGroup from \"antd/lib/button/button-group\";\n\nimport \"./index.css\";\n\nexport default function FormilyComponent() {\n  const form = createForm({});\n  const SchemaField = createSchemaField({ components });\n  const handleSave = function () {\n    const values = form.getValuesIn([]);\n    console.log(\"values = \", { ...values });\n  };\n  return (\n    <div>\n      <Form form={form} labelAlign=\"right\" labelCol={5} wrapperCol={16}>\n        <SchemaField\n          components={components}\n          schema={schemaTree as any}\n        ></SchemaField>\n      </Form>\n      <FormButtonGroup style={{ marginTop: \"20px\" }}>\n        <ButtonGroup>\n          <Button>Preview</Button>\n          <Button>Cancel</Button>\n        </ButtonGroup>\n        <Button type=\"primary\" onClick={handleSave}>\n          Save\n        </Button>\n      </FormButtonGroup>\n    </div>\n  );\n}\n","export const options = [\n  {\n    label: \"first\",\n    value: 1,\n  },\n  {\n    label: \"second\",\n    value: 2,\n  },\n  {\n    label: \"thirst\",\n    value: 3,\n  },\n  {\n    label: \"four\",\n    value: 4,\n  },\n];\n","import react, { useEffect, useState } from \"react\";\n// @ts-ignore\nimport Form from \"@rjsf/antd\";\n\nimport { getOptions } from \"../../utils/index\";\n\nexport default function ReactJsonSchemaForm() {\n  const [buttonStyleOptions, setButtonStyleOptions] = useState<any[]>([]);\n  useEffect(() => {\n    getOptions().then((data) => {\n      console.log(\"data = \", data);\n      setButtonStyleOptions(data as any);\n    });\n  }, []);\n  const schema = {\n    type: \"object\",\n    properties: {\n      choose: {\n        type: \"string\",\n        title: \"请选择\",\n        enum: [\"a\", \"b\", \"c\"],\n      },\n      buttonSetting: {\n        type: \"object\",\n        properties: {\n          buttonStyle: {\n            type: \"string\", // TODO: 注意这里只是值类型，可以映射到不同的组件，只要这个组件接收的value 类型为string\n            enum: buttonStyleOptions, // ✅ 支持异步 & 动态变化\n          },\n          buttonText: {\n            type: \"number\",\n            allowClear: true,\n            defaultValue: 1,\n          },\n          buttonFunction: {\n            type: \"string\", // TODO: 这里需要考虑一种情况，就是value为function的情况，如果不能是function，起码要有方式把function序列化成string\n          },\n          buttonUrl: {\n            type: \"string\",\n          },\n        },\n      },\n    },\n  };\n\n  const uiSchema = {\n    choose: {\n      \"ui:widget\": \"select\",\n    },\n    // buttonSetting: {\n    buttonStyle: {\n      \"ui:widget\": \"Select\",\n    },\n    buttonText: {\n      \"ui:widget\": \"InputNumber\",\n      \"ui:options\": {\n        allowClear: true,\n        defaultValue: 1,\n      },\n    },\n    buttonFunction: {\n      \"ui:widget\": \"select\",\n    },\n    buttonUrl: {\n      \"ui:widget\": \"select\",\n    },\n    // },\n  };\n  function handleSubmit(values: any) {\n    console.log(\n      \"react-json-schema-form demo submit trigger, values = \",\n      values\n    );\n  }\n  return (\n    <div>\n      <h4>react-json-schema-form Demo</h4>\n      <Form\n        schema={schema as any}\n        uiSchema={uiSchema}\n        onSubmit={handleSubmit}\n      />\n    </div>\n  );\n}\n","// 提供异步获取的下拉列表\nimport { options } from \"./constant\";\n\nexport function getOptions() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(options);\n    }, 3000);\n  });\n}\n","export const schema = {\n  type: \"object\",\n  properties: {\n    answer: {\n      title: \"Answer\",\n      type: \"object\",\n    },\n  },\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport FormRender, { useForm } from \"form-render\";\n\nimport { schema } from \"./schema\";\n\nconst FormRenderComponent = function () {\n  const form = useForm();\n  const onFinish = (formData: any, errors: any) => {\n    console.log(formData, errors);\n  };\n  return (\n    <div>\n      x-render demo\n      <FormRender form={form} schema={schema} onFinish={onFinish} />\n      <div>\n        <Button type=\"primary\" onClick={form.submit}>\n          Save\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default FormRenderComponent;\n","import \"./App.css\";\nimport \"@formily/antd/dist/antd.css\";\nimport \"antd/dist/antd.css\";\n\nimport FormilyComponent from \"./pages/formily\";\nimport ReactJsonSchemaForm from \"./pages/reactJsonSchemaForm\";\nimport FormRenderComponent from \"./pages/x-render\";\n\nimport { Link, BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ display: \"flex\" }}>\n      <Router>\n        <div>\n          <p>\n            <Link to=\"/\">Home</Link>\n          </p>\n          <p>\n            <Link to=\"./formily\">Formily Demo</Link>\n          </p>\n          <p>\n            <Link to=\"./form-render\">Form-Render Demo</Link>\n          </p>\n          <p>\n            <Link to=\"./react-jsonschema-form\">react-jsonschema-form Demo</Link>\n          </p>\n        </div>\n\n        <Switch>\n          <Route path=\"./formily\">\n            <div\n              style={{\n                padding: \"20px\",\n                border: \"1px solid #555\",\n                margin: \"10px\",\n                width: \"500px\",\n              }}\n            >\n              <FormilyComponent />\n            </div>\n          </Route>\n          <Route path=\"./form-render\">\n            <div\n              style={{\n                flex: 1,\n                padding: \"20px\",\n                border: \"1px solid #555\",\n                margin: \"10px\",\n              }}\n            >\n              <FormRenderComponent />\n            </div>\n          </Route>\n          <Route path=\"./react-jsonschema-form\">\n            <div\n              style={{\n                flex: 1,\n                padding: \"20px\",\n                border: \"1px solid #555\",\n                margin: \"10px\",\n              }}\n            >\n              <ReactJsonSchemaForm />\n            </div>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}